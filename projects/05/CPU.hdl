// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not (in=instruction[15], out=Ainst);
    Or (a=Ainst, b=instruction[5], out=c2);
    And (a=instruction[15], b=instruction[4], out=c3);
    And (a=instruction[15], b=instruction[12], out=c4);
    And (a=instruction[15], b=instruction[3], out=c8);
    And (a=instruction[15], b=jump, out=c5);


    // Put your code here:
    Mux16 (a=instruction, b=ALUout, sel=instruction[15], out=mux1 );
    ARegister (in=mux1, load=c2, out=Areg, out[0..14]=addressM);
    PC (in=Areg, load=c5, reset=reset, inc=true, out[0..14]=pc);
    Mux16 (a=Areg, b=inM, sel=c4, out=mux2);
    DRegister (in=ALUout, load=c3, out=Dreg);
    ALU (x=Dreg, y=mux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=z, ng=n );
    And (a=c8, b=true, out=writeM);

    Not (in=instruction[0], out=nj3);
    Not (in=instruction[1], out=nj2);
    Not (in=instruction[2], out=nj1);
    Not (in=z, out=nz);
    Not (in=n, out=nn);
    Or (a=z, b=nn, out=gte);
    Or (a=z, b=n, out=lte);

    //JGT
    And (a=nj1, b=nj2, out=nj1nj2);
    And (a=nj1nj2, b=instruction[0], out=nj1nj2j3);
    And (a=nj1nj2j3, b=nz, out=jgtnz);
    And (a=jgtnz, b=nn, out=jgt);

    //JEQ
    And (a=nj1, b=instruction[1], out=nj1j2);
    And (a=nj1j2, b=nj3, out=nj1j2nj3);
    And (a=nj1j2nj3, b=z, out=jeq);

    //JGE
    And (a=nj1j2, b=instruction[0], out=nj1j2j3);
    And (a=nj1j2j3, b=gte, out=jge);

    //JLT
    And (a=instruction[2], b=nj2, out=j1nj2);
    And (a=j1nj2, b=nj3, out=j1nj2nj3);
    And (a=j1nj2nj3, b=nz, out=jltnz);
    And (a=jltnz, b=n, out=jlt);

    //JNE
    And (a=j1nj2, b=instruction[0], out=j1nj2j3);
    And (a=j1nj2j3, b=nz, out=jne);

    //JLE
    And (a=instruction[1], b=instruction[2], out=j1j2);
    And (a=j1j2, b=nj3, out=j1j2nj3);
    And (a=j1j2nj3, b=lte, out=jle);

    //JMP 
    And (a=j1j2, b=instruction[0], out=jmp);

    Or8Way (in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false, out=jump);
}